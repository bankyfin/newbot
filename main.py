
import os
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import *

app = Flask(__name__)

ACCESS_TOKEN = '0/BrDPJ0LLT9/s0M/Lsadb6WpA1zrmRBXNoXT0qPE3txmJqr780m7wnOgxdJWvMutQheE7Lv71yw00XHbpR/rHG9qEaC2Hlw/o2x3rcdyuh2Rm3EidFKcbIPFbFi7nNvjvSEFtWckr1NR/1nM3WpxQdB04t89/1O/w1cDnyilFU='
CHANNEL_SECRET = 'c4485d07c997249825988371f0a9897b'

line_bot_api = LineBotApi(ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

admin_list = set()
blacklist = set()
read_tracking = {}

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return 'OK'

@handler.add(JoinEvent)
def handle_join(event):
    group_id = event.source.group_id
    welcome_text = (
        "‚úÖ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß\n"
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
        "!startread ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°\n"
        "!read ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß\n"
        "!whoread ‚Üí ‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°\n"
        "!addadmin @‡∏ä‡∏∑‡πà‡∏≠ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô\n"
        "!adminlist ‚Üí ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô\n"
        "!unblock user_id ‚Üí ‡∏õ‡∏•‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å\n"
    )
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=welcome_text))

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    group_id = getattr(event.source, 'group_id', None)
    text = event.message.text.strip()

    if group_id:
        if 'messages' not in read_tracking:
            read_tracking['messages'] = {}
        read_tracking['messages'][event.message.id] = {
            'text': text,
            'user_id': user_id,
            'display_name': get_user_name(user_id, group_id)
        }

    if not group_id:
        return

    if text.startswith('!addadmin') and user_id in admin_list:
        if event.message.mention:
            for mentionee in event.message.mention.mentionees:
                admin_list.add(mentionee.user_id)
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text='‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'))
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text='‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏°‡∏ô‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°'))

    elif text.startswith('!adminlist') and user_id in admin_list:
        names = [get_user_name(uid, group_id) for uid in admin_list]
        reply = '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n' + ('\n'.join(names) if names else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô')
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))

    elif text.startswith('!unblock') and user_id in admin_list:
        parts = text.split()
        if len(parts) == 2:
            blocked_id = parts[1]
            blacklist.discard(blocked_id)
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text='‚úÖ ‡∏õ‡∏•‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß'))
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text='‚ùó ‡πÉ‡∏™‡πà user_id ‡∏î‡πâ‡∏ß‡∏¢'))

    elif text == '!startread' and user_id in admin_list:
        read_tracking[group_id] = set()
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text='üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'))

    elif text == '!read':
        if group_id in read_tracking:
            read_tracking[group_id].add(user_id)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text='üìñ ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß'))

    elif text == '!whoread' and user_id in admin_list:
        if group_id in read_tracking:
            readers = [get_user_name(uid, group_id) for uid in read_tracking[group_id]]
            msg = 'üßç‚Äç‚ôÇÔ∏è ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß:\n' + ('\n'.join(readers) if readers else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏≠‡πà‡∏≤‡∏ô')
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=msg))
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text='‚ùó ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô'))

    else:
        # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text='‚ùì ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå'))

@handler.add(UnsendEvent)
def handle_unsend(event):
    unsend_id = event.unsend.message_id
    if unsend_id in read_tracking.get('messages', {}):
        info = read_tracking['messages'][unsend_id]
        name = info['display_name']
        text = info['text']
        group_id = getattr(event.source, 'group_id', None)
        if group_id:
            line_bot_api.push_message(group_id, TextSendMessage(text=f'üö® {name} ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text}'))

@handler.add(MemberLeftEvent)
def handle_kick(event):
    group_id = getattr(event.source, 'group_id', None)
    kicker = event.source.user_id
    if kicker not in admin_list:
        blacklist.add(kicker)
        try:
            line_bot_api.kickout_from_group(group_id, kicker)
        except:
            pass
        line_bot_api.push_message(group_id, TextSendMessage(text='üö´ ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏≠‡∏Å ‚Äî ‡∏ö‡∏≠‡∏ó‡πÄ‡∏ï‡∏∞‡∏Å‡∏•‡∏±‡∏ö'))

def get_user_name(user_id, group_id):
    try:
        profile = line_bot_api.get_group_member_profile(group_id, user_id)
        return profile.display_name
    except:
        return user_id

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
